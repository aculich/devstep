#!/bin/bash

set -e
set -o pipefail
shopt -s dotglob

BUILD_DIR="$1"
CACHE_DIR="$2"

basedir="${CACHE_DIR}/chh-heroku-buildpack-php"
if ! [ -d $basedir ]; then
  git clone https://github.com/CHH/heroku-buildpack-php.git $basedir
else
  echo 'Using cached version of https://github.com/CHH/heroku-buildpack-php'
fi

basedir="${basedir}/bin"
basedir=$(readlink -f $basedir)
export HEROKU_PHP_BUILDPACK=$basedir

bp_basedir="$( cd -P "$( dirname "$0" )" && pwd )"
bp_basedir=$(readlink -f $bp_basedir)

source "$basedir/../conf/buildpack.conf"
source $basedir/common.sh

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

cd "$BUILD_DIR"
mkdir -p "$CACHE_DIR/package"

export PATH="/.devstep/bin:$PATH"

function fetch_engine_package() {
    local engine="$1"
    local version="$2"
    local location="$3"

    fetch_package "${engine}-${version}" "$location"
}

function fetch_package() {
    local package="$1"
    local location="$2"

    mkdir -p "$location"

    local checksum_url="http://${S3_BUCKET}.s3.amazonaws.com/package/${package}.md5"
    local package_url="http://${S3_BUCKET}.s3.amazonaws.com/package/${package}.tgz"
    local checksum=$(curl "$checksum_url" 2> /dev/null)
    local cache_checksum=

    if [ -f "$CACHE_DIR/package/${package}.md5" ]; then
        local cache_checksum=$(cat "$CACHE_DIR/package/${package}.md5")
    fi

    mkdir -p "$CACHE_DIR/package/$(dirname "$package")"

    if [ "$cache_checksum" != "$checksum" ]; then
        curl "$package_url" -L -s > "$CACHE_DIR/package/${package}.tgz"
        echo "$checksum" > "$CACHE_DIR/package/${package}.md5"
    else
        echo "Checksums match. Fetching from cache."
    fi

    tar xzf "$CACHE_DIR/package/${package}.tgz" -C "$location"
}

function log_error() {
    local c='s/^/ !     /'
    case $(uname) in
        Darwin) echo "$*" | sed -l "$c";;
        *)      echo "$*" | sed -u "$c";;
    esac
}

function indent() {
    local c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    if [ ! -f "$target/composer.json" ]; then
        return 0
    fi

    if [ ! -f "$target/composer.lock" ]; then
        log_error "Lockfile required. Please check it in."
        return 1
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR
    mkdir -p "$target/vendor/composer/bin"

    local checksum=$(curl --silent "http://${S3_BUCKET}.s3.amazonaws.com/composer/composer.phar.md5")

    status "Vendoring Composer"
    if [ ! -f "$CACHE_DIR/composer.phar.md5" ] || [ "$(cat $CACHE_DIR/composer.phar.md5)" != "$checksum" ]; then
        echo "Updating Composer" | indent
        curl --silent "http://${S3_BUCKET}.s3.amazonaws.com/composer/composer.phar" > "$CACHE_DIR/composer.phar" | indent
        chmod a+x "$CACHE_DIR/composer.phar"
        echo "$checksum" > $CACHE_DIR/composer.phar.md5
    fi

    cp "$CACHE_DIR/composer.phar" "$target/vendor/composer/bin/"

    local required_extensions=$(jq --raw-output '.require | keys | .[]' < "$BUILD_DIR/composer.json" | grep '^ext-' | sed 's/^ext-//')
    if [ -n "$required_extensions" ]; then
        status "Bundling additional extensions $required_extensions"
        for ext in $required_extensions; do
            echo "$ext" | indent
            # TODO: Find a better way to ignore extensions which were not found in S3
            fetch_package "ext/$(php_api_version)/php-${ext}" "/.devstep/vendor/php" 2>/dev/null || true | indent
        done
    fi

    php "vendor/composer/bin/composer.phar" self-update

    status "Installing application dependencies with Composer"
    {
        cd "$target"
        php "vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction \
            --no-dev
        cd "$cwd"
    } | indent
}

function install_node_deps() {
    local cwd=$(pwd)
    local target="$1"

    if [ ! -f "$target/package.json" ]; then
        return 0
    fi

    status "NODE (package.json) app detected"

    source ${basedir}/compile_node $BUILD_DIR $CACHE_DIR

    local node_path='vendor/node'

    # Symlink node to /.devstep/vendor/node so node and its modules are runnable.

    ln -s ${BUILD_DIR}/${node_path}/ /.devstep/${node_path}
    ln -s ${BUILD_DIR}/node_modules /.devstep/node_modules

    echo "Node " `node -v` | indent
}

export_env_dir() {
    env_dir=$1
    blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
        for e in $(ls $env_dir); do
            echo "$e" | grep -qvE "$blacklist_regex" &&
            export "$e=$(cat $env_dir/$e)"
            :
        done
    fi
}

function mktmpdir() {
    dir=$(mktemp -t php-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

function php_api_version() {
    basename "$(php-config --extension-dir)" | tr '-' ' ' | cut -f 5 -d ' '
}

function package_document_root() {
    jq --raw-output '.extra.heroku["document-root"] // ""' < "$BUILD_DIR/composer.json"
}

function package_index_file() {
    jq --raw-output '.extra.heroku["index-document"] // "index.php"' < "$BUILD_DIR/composer.json"
}

function package_framework() {
    jq --raw-output '.extra.heroku.framework // ""' < "$BUILD_DIR/composer.json"
}

function package_nginx_version() {
    jq --raw-output ".extra.heroku.engines.nginx // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_version() {
    jq --raw-output ".extra.heroku.engines.php // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_config() {
    jq --raw-output '.extra.heroku["php-config"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_php_includes() {
    jq --raw-output '.extra.heroku["php-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_nginx_includes() {
    jq --raw-output '.extra.heroku["nginx-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_log_files() {
    jq --raw-output '.extra.heroku["log-files"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_compile_cmd() {
    jq --raw-output '.extra.heroku["compile"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

export_env_dir "$3"

# Download jq binary for JSON processing
mkdir -p /.devstep/bin
if ! [ -f /.devstep/bin/jq ]; then
  curl "http://${S3_BUCKET}.s3.amazonaws.com/jq/jq" -L -s -o - > /.devstep/bin/jq
fi
chmod +x /.devstep/bin/jq

DEFAULT_PHP="5.5.10"
DEFAULT_NGINX="1.4.4"

AVAILABLE_PHP_VERSIONS=$(curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.php" 2> /dev/null)
AVAILABLE_NGINX_VERSIONS=$(curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.nginx" 2> /dev/null)

MCRYPT_VERSION="2.5.8"
PHP_VERSION="default"
NGINX_VERSION="default"
DOCUMENT_ROOT=$BUILD_DIR
INDEX_DOCUMENT="index.php"
FRAMEWORK=
PHP_EXTRA_CONFIG=
PHP_INCLUDES=
COMPILE_CMD=
NGINX_INCLUDES=
NEWRELIC_VERSION=4.4.5.35
LOG_FILES=( "/.devstep/vendor/nginx/logs/access.log" "/.devstep/vendor/nginx/logs/error.log" "/.devstep/vendor/php/var/log/error.log" )

# Read config variables from composer.json if it exists
if [ -f "$BUILD_DIR/composer.json" ]; then
    PHP_VERSION=$(package_php_version)
    NGINX_VERSION=$(package_nginx_version)
    DOCUMENT_ROOT=$(package_document_root)
    INDEX_DOCUMENT=$(package_index_file)
    FRAMEWORK=$(package_framework)
    PHP_EXTRA_CONFIG=$(package_php_config)
    PHP_INCLUDES=$(package_php_includes)
    COMPILE_CMD=$(package_compile_cmd)
    NGINX_INCLUDES=$(package_nginx_includes)
    USER_LOG_FILES=$(package_log_files)
fi

if [ -z "${DOCUMENT_ROOT}" ]; then
  DOCUMENT_ROOT='/workspace'
fi

if [ -f "${DOCUMENT_ROOT}/public/index.php" ]; then
  DOCUMENT_ROOT="${DOCUMENT_ROOT}/public"
elif [ -f "${DOCUMENT_ROOT}/webroot/index.php" ]; then
  DOCUMENT_ROOT="${DOCUMENT_ROOT}/webroot"
elif [ -f "${DOCUMENT_ROOT}/web/index.php" ]; then
  DOCUMENT_ROOT="${DOCUMENT_ROOT}/web"
fi

# Try reading PHP version from .php-version file in project
if [ -f "$BUILD_DIR/.php-version" ]; then
    PHP_VERSION=$(cat "$BUILD_DIR/.php-version")
fi

if [ "$PHP_VERSION" = "default" ]; then
    PHP_VERSION="$DEFAULT_PHP"
fi

if [ "$NGINX_VERSION" = "default" ]; then
    NGINX_VERSION="$DEFAULT_NGINX"
fi

# Look for ".*" versions, match them against all available versions
# and select the latest version which was found.
if echo "$PHP_VERSION" | grep '\*' &>/dev/null; then
    PHP_VERSION=$(echo "$AVAILABLE_PHP_VERSIONS" | grep "^$PHP_VERSION$" | sort -r | head -n1)
fi

if echo "$NGINX_VERSION" | grep '\*' &>/dev/null; then
    NGINX_VERSION=$(echo "$AVAILABLE_NGINX_VERSIONS" | grep "^$NGINX_VERSION$" | sort -r | head -n1)
fi

VENDORED_NGINX=/.devstep/vendor/nginx
VENDORED_PHP=/app/vendor/php

[ ! -d "$BUILD_DIR/vendor" ] && mkdir -p "$BUILD_DIR/vendor"

status "Bundling NGINX ${NGINX_VERSION}"
fetch_engine_package nginx "$NGINX_VERSION" /.devstep/vendor/nginx | indent

status "Bundling PHP ${PHP_VERSION}"

# Install libraries also on build container, so PHP doesn't wayne about missing
# dynamic libraries when running it during the slug compilation.
sudo mkdir -p /app/vendor/{libicu,libmcrypt}
sudo chown -R developer: /app
fetch_package "libicu-51" /app/vendor/libicu > /dev/null
fetch_package "libmcrypt-${MCRYPT_VERSION}" /app/vendor/libmcrypt > /dev/null

fetch_engine_package php "$PHP_VERSION" /app/vendor/php | indent

test ! -d "/.devstep/.profile.d" && mkdir -p /.devstep/.profile.d || true

cat > "/.devstep/.profile.d/php.sh" <<SH
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/.devstep/bin:/.devstep/vendor/nginx/sbin:/app/vendor/php/sbin:/app/vendor/php/bin:/app/vendor/bin:\$PATH
export HEROKU_BUILD_TIME=$(date +%Y%m%d%H%M%S)
export PORT=8080
SH

source "/.devstep/.profile.d/php.sh"

# Fetch additional extensions
status "Bundling extensions"
echo "       apcu"
fetch_package "ext/$(php_api_version)/php-apcu" "/.devstep/vendor/php" | indent
echo "       phpredis"
fetch_package "ext/$(php_api_version)/php-redis" "/.devstep/vendor/php" | indent
echo "       mongo"
fetch_package "ext/$(php_api_version)/php-mongo" "/.devstep/vendor/php" | indent

if [ -n "$BUILDPACK_DEBUG" ]; then
    ls -R /.devstep/vendor/nginx
    ls -R /.devstep/vendor/php
fi

mkdir -p "/app/conf"
cp "$bp_basedir/../conf/nginx/base.conf.erb" "/app/conf/nginx.conf.erb"
cp "$basedir/../conf/php/php-fpm.conf" "/app/vendor/php/etc/php-fpm.conf"
cp "$basedir/../conf/php/php.ini" "/app/vendor/php/etc/php.ini"

sudo $(which pear) config-set php_ini /app/vendor/php/etc/php.ini &> /dev/null

for conf in $PHP_EXTRA_CONFIG; do
    echo "$conf" >> "/app/vendor/php/etc/php.ini"
done

for include in $PHP_INCLUDES; do
    cp "$BUILD_DIR/$include" "/app/vendor/php/etc/conf.d/"
done

# Detect PHP framework
for f in "$bp_basedir/../frameworks/"*; do
    if "$f" detect "$BUILD_DIR"; then
        FRAMEWORK="$f"
    fi
done

# Fall back to classic mode
if [ -z "$FRAMEWORK" ]; then
    FRAMEWORK="$bp_basedir/../frameworks/default"
fi

# Try to load the framework from the "frameworks" directory if it's just a
# simple framework name like "symfony2"
if [ ! -f "$FRAMEWORK" ] && [ -f "$bp_basedir/../frameworks/$FRAMEWORK" ]; then
    FRAMEWORK="$bp_basedir/../frameworks/$FRAMEWORK"
fi

if [ ! -f "$FRAMEWORK" ]; then
    log_error "Framework \"$FRAMEWORK\" not found!"
    exit 1
fi

"$FRAMEWORK" compile "$BUILD_DIR" "$CACHE_DIR"

install_node_deps "$BUILD_DIR"
install_composer_deps "$BUILD_DIR"

LOG_FILES=$(unique_array ${LOG_FILES[@]} ${USER_LOG_FILES[@]})
if [ -n "$FRAMEWORK" ] && [ -f "$FRAMEWORK" ]; then
    FRAMEWORK_LOG_FILES=$("$FRAMEWORK" get-log-files)
    LOG_FILES=$(unique_array ${LOG_FILES[@]} ${FRAMEWORK_LOG_FILES[@]})
fi

if [ -n "$COMPILE_CMD" ]; then
    status "Running compile commands"
    while read -r cmd; do
        echo "Running '$cmd'" | indent
        eval $cmd             | indent
    done <<< "$COMPILE_CMD"
fi

if [ -n "$FRAMEWORK" ] && [ -f "$FRAMEWORK" ]; then
    "$FRAMEWORK" end "$BUILD_DIR" "$CACHE_DIR"
fi

"$FRAMEWORK" post-compile "$BUILD_DIR" "$CACHE_DIR" || true

status "Disabling opcache"
rm /app/vendor/php/etc/conf.d/opcache.ini

cat > /.devstep/bin/run-nginx <<SH
#!/usr/bin/env bash

pmsgr=/tmp/pmsgr
rm -f \$pmsgr
mkfifo \$pmsgr

for var in \`env | cut -f1 -d=\`; do
    echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

export DOCUMENT_ROOT="$DOCUMENT_ROOT"
export INDEX_DOCUMENT="$INDEX_DOCUMENT"
export NGINX_INCLUDES="$NGINX_INCLUDES"
export PORT=8080

erb /app/conf/nginx.conf.erb > /.devstep/vendor/nginx/conf/nginx.conf
erb /app/conf/site.conf.erb > /.devstep/vendor/nginx/conf/site.conf

`init_log_plex_fifo ${LOG_FILES}`
`tail_log_plex ${LOG_FILES} ${SYS_LOG_FILES}`

(
    /app/vendor/php/sbin/php-fpm -p "/app/vendor/php"
    #\$pmsgr < "php-fpm"
)&

(
    /.devstep/vendor/nginx/sbin/nginx -p "/.devstep/vendor/nginx" -c /.devstep/vendor/nginx/conf/nginx.conf
    #\$pmsgr < "nginx"
)&


read exitproc <\$pmsgr
echo "Boot failed: \$exitproc"
exit 1
SH

chmod +x /.devstep/bin/run-nginx

if ! [ -L /etc/service/nginx/run ]; then
  mkdir -p /etc/service/nginx
  ln -s /.devstep/bin/run-nginx /etc/service/nginx/run
fi
