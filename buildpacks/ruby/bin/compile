#!/usr/bin/env bash

set -e

GEMFILE_PATH=$1/Gemfile

# From https://github.com/aripollak/rbenv-bundler-ruby-version/blob/32bd1a63ed57c6fcfbd4f3766fed64fad21b61b0/bin/rbenv-bundler-ruby-version#L24-L33
version_from_gemfile() {
	if [ -f ${GEMFILE_PATH} ]; then
    # handles simple ruby statements, as well as engine and engine_version,
    # with single or double quotes and in either order
    grep '^\s*ruby' "$GEMFILE_PATH" | sed -e 's/\s*#.*//' -e 's/engine:/:engine =>/' \
          -e 's/engine_version:/:engine_version =>/' \
          -e "s/.*:engine\s*=>\s*['\"]\([^'\"]*\).*:engine_version\s*=>\s*['\"]\([^'\"]*\).*/\1-\2/" \
          -e "s/.*:engine_version\s*=>\s*['\"]\([^'\"]*\).*:engine\s*=>\s*['\"]\([^'\"]*\).*/\2-\1/" \
          -e "s/^\s*ruby\s*['\"]\([^'\"]*\).*/\1/" | head -1
  fi
}

install_ruby() {
  mkdir -p $1/rubies

  DEVSTEP_RUBY_VERSION="ruby-${DEVSTEP_RUBY_VERSION}"

  tarball_path=$1/rubies/${DEVSTEP_RUBY_VERSION}.tgz
  if ! [ -f $tarball_path ]; then
    echo "Downloading and installing ${DEVSTEP_RUBY_VERSION}..."
    ruby_url="https://s3-external-1.amazonaws.com/heroku-buildpack-ruby/cedar-14/${DEVSTEP_RUBY_VERSION}.tgz"
    curl -L -s $ruby_url > $tarball_path
  else
    echo "Installing cached ${DEVSTEP_RUBY_VERSION}..."
  fi

  mkdir -p $HOME/ruby
  tar xfz $tarball_path -C $HOME/ruby

  mkdir -p /.devstep/.profile.d
  echo 'export PATH="$HOME/ruby/bin:$PATH"' > $HOME/.profile.d/ruby.sh

  return 0
}

requires_phantomjs() {
  return $(grep -q 'poltergeist' $1/Gemfile*)
}

install_phantomjs() {
  /.devstep/buildpacks/phantomjs/bin/compile $1 $2
}

# TODO: Look into travis.yml as well
DEVSTEP_RUBY_VERSION=${DEVSTEP_RUBY_VERSION:-$(version_from_gemfile)}
if [ -z "$DEVSTEP_RUBY_VERSION" ]; then
  DEVSTEP_RUBY_VERSION='2.1.2'
  echo "Unable to identify the project ruby version, setting to ${DEVSTEP_RUBY_VERSION}"
fi

if [ -d /.devstep/ruby ]; then
  echo 'Ruby already installed, skipping'
else
  # Step away from project sources to avoid loading .ruby-version and .ruby-gemset files
  pushd / &>/dev/null
  install_ruby $2 || {
    echo 'Error installing ruby!'
    tail /tmp/build.log
    exit 1
  }
  popd &>/dev/null
  # Create this dir from here as we might want to bind mount ~/.gem/credentials
  # from the host
  sudo mkdir -p $HOME/.gem/specs
  sudo chown -R developer: $HOME/.gem
  cat <<-GEMRC > $HOME/.gemrc
---
gem: --no-ri --no-rdoc
GEMRC

  # Use system libraries when installing nokogiri
  mkdir -p "${HOME}/.bundle"
  cat <<-STR > $HOME/.bundle/config
---
BUNDLE_BUILD__NOKOGIRI: "--use-system-libraries"
STR
fi

source /.devstep/.profile.d/ruby.sh

DEVSTEP_BUNDLER_VERSION=${DEVSTEP_BUNDLER_VERSION:-'1.7.2'}

if ! $(which bundle &> /dev/null); then
  tarball_path=$2/rubies/bundler-${DEVSTEP_BUNDLER_VERSION}.gem
  if ! [ -f $tarball_path ]; then
    echo "Downloading and installing bundler ${DEVSTEP_BUNDLER_VERSION}..."
    bundler_url="https://rubygems.org/downloads/bundler-${DEVSTEP_BUNDLER_VERSION}.gem"
    curl -L -s $bundler_url > $tarball_path
  else
    echo "Installing cached bundler ${DEVSTEP_BUNDLER_VERSION}..."
  fi
  gem install $tarball_path
fi

# If there's no Gemfile in place, our work here is done
if ! [ -f $GEMFILE_PATH ]; then
  exit 0
fi

mkdir -p "$2/gem-cache"
gem_cache="$(gem env gemdir)/cache"
if ! [ -L $gem_cache ]; then
  rm -rf $gem_cache
  ln -s "$2/gem-cache" $gem_cache
fi

echo "Installing gems using bundler '$(bundle -v | cut -d' ' -f 3)'..."
(cd $1 && bundle install --jobs=4)

if requires_phantomjs $1; then
  if [ -d /.devstep/phantomjs ]; then
    echo '-----> PhantomJS already installed, skipping'
  else
    install_phantomjs $1 $2
  fi
fi
