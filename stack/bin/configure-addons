#!/usr/bin/env bash
set -eo pipefail

available_addons() {
  for addon in ${addons_root}/*; do
    echo "  - $(basename $addon)"
  done
}

usage() {
  cat <<EOF
Usage:
configure-addons --auto
configure-addons <addon-1> <addon-...>

Available addons:
$(available_addons)
EOF
  return 0
}

options=$(getopt -o h -l help,auto -- "$@")

if [ $? -ne 0 ]; then
    usage
    exit 1
fi

eval set -- "$options"

AUTO='0'
while :; do
    case "$1" in
        -h|--help)  usage && exit 1;;
        --auto)     AUTO='1' && shift 1;;
        *)          shift 1 && break;;
    esac
done

function output_redirect() {
  if [[ "$slug_file" == "-" ]]; then
    cat - 1>&2
  else
    cat -
  fi
}

function echo_title() {
  echo $'\e[1G----->' $* | output_redirect
}

function ensure_indent() {
  while read line; do
    if [[ "$line" == --* ]]; then
      echo $'\e[1G'$line | output_redirect
    else
      echo $'\e[1G      ' "$line" | output_redirect
    fi
  done
}

project_root=${1:-/workspace}
cache_root=${2:-/.devstep/cache}
addons_root=/.devstep/addons

if [ "${AUTO}" = '1' ]; then
  [ "$#" != '0' ] &&
    echo "Auto detect mode does not accept parameters!" &&
    usage &&
    exit 1

  echo 'Cannot auto detect yet!'
  exit 1
fi

if [ "$#" = '0' ]; then
  echo 'No addons provided, aborting'
  exit 1
fi

AVAILABLE_ADDONS=$(available_addons)
# Validate provided addons
for addon in $*; do
  if ! [ -d ${addons_root}/${addon} ]; then
    echo "Invalid addon '${addon}'"
    usage
    exit 1
  fi
done

for addon in $*; do
  echo_title "Configuring ${addon}..."
  ${addons_root}/${addon}/bin/configure $project_root $cache_root | ensure_indent
done
